# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.3
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# # Healthcare Insurance Claim Approval Agent
# **Capstone 2 - Generative AI Track**  
# Built with **LangChain**, **LangGraph**, and **OpenAI gpt-4o-mini**

# ## 1. Install & Import Dependencies

# !pip install -q langchain langgraph openai python-dotenv pandas

import json
import pandas as pd
from datetime import datetime
from typing import Dict, Any
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langgraph.graph import StateGraph, MessagesState
from langgraph.prebuilt import ToolNode, tools_condition
from langchain_core.tools import tool
import os

# Set your OpenAI API key
os.environ["OPENAI_API_KEY"] = "your-api-key-here"  # REPLACE WITH YOUR KEY

# ## 2. Load Datasets

def load_json(file_path):
    with open(file_path, 'r') as f:
        return json.load(f)

# Load reference codes
cpt_codes = load_json("reference_codes.json")
icd_codes = {k: v for k, v in load_json("reference_codes.json").items() if k[0].isalpha() and k[0].upper() == k[0]}

# Load policies
policies = {p["policy_id"]: p for p in load_json("insurance_policies.json")}

# Load patient records
def load_records(file_path):
    records = load_json(file_path)
    for r in records:
        # Compute age
        dob = datetime.strptime(r["date_of_birth"], "%Y-%m-%d")
        dos = datetime.strptime(r["date_of_service"], "%Y-%m-%d")
        age = dos.year - dob.year
        if (dos.month, dos.day) < (dob.month, dob.day):
            age -= 1
        r["age"] = age
    return records

validation_records = load_records("validation_records.json")
test_records = load_records("test_records.json")

print(f"Loaded {len(policies)} policies, {len(validation_records)} validation, {len(test_records)} test records.")

# ## 3. Define Tools

llm = ChatOpenAI(model="gpt-4o-mini", temperature=0)

@tool
def summarize_patient_record(record_str: str) -> str:
    """Summarize patient record into structured format."""
    prompt = ChatPromptTemplate.from_template("""
You are an expert medical claims processor. Summarize the patient record below into **exactly 7 labeled sections** in order.

**Patient Record (JSON):**
{record}

**Output Format (use bullet points):**
- **Patient Demographics**: name, gender, age
- **Insurance Policy ID**: [ID]
- **Diagnoses and Descriptions**: ICD10 code - description
- **Procedures and Descriptions**: CPT code - description
- **Preauthorization Status**: Required: Yes/No, Obtained: Yes/No
- **Billed Amount (in USD)**: $X.XX
- **Date of Service**: YYYY-MM-DD

Use these mappings:
CPT: {cpt_map}
ICD-10: {icd_map}

Only include data present in the record. Do **not** make decisions.
""")
    chain = prompt | llm | StrOutputParser()
    record = json.loads(record_str)
    return chain.invoke({
        "record": json.dumps(record, indent=2),
        "cpt_map": {k: v for k, v in cpt_codes.items() if k.isdigit()},
        "icd_map": icd_codes
    })

@tool
def summarize_policy_guideline(policy_id: str) -> str:
    """Summarize insurance policy for given policy_id."""
    policy = policies.get(policy_id)
    if not policy:
        return f"Policy {policy_id} not found."
    
    prompt = ChatPromptTemplate.from_template("""
Summarize the insurance policy below into structured format.

**Policy:**
{policy}

**Output Format:**
- **Policy Details**: policy ID and plan name
- **Covered Procedures**:
  - **Procedure Code and Description**: CPT - Name
    - Covered Diagnoses and Descriptions: ICD - Name
    - Gender Restriction: [Any/Male/Female]
    - Age Range: [min, max)
    - Preauthorization Requirement: Yes/No
    - Notes on Coverage: [notes]

Use mappings:
CPT: {cpt_map}
ICD-10: {icd_map}

""")
    chain = prompt | llm | StrOutputParser()
    return chain.invoke({
        "policy": json.dumps(policy, indent=2),
        "cpt_map": {k: v for k, v in cpt_codes.items() if k.isdigit()},
        "icd_map": icd_codes
    })

@tool
def check_claim_coverage(record_summary: str, policy_summary: str) -> str:
    """Evaluate coverage: return APPROVE or ROUTE FOR REVIEW with reasoning."""
    prompt = ChatPromptTemplate.from_template("""
You are a senior claims adjudicator. Evaluate if the claimed procedure is covered.

**Patient Summary:**
{record_summary}

**Policy Summary:**
{policy_summary}

**Rules:**
- Approve **only if ALL** conditions are met:
  1. Diagnosis in covered_diagnoses
  2. Procedure code listed
  3. Age ≥ min and < max
  4. Gender matches (Any = ignore)
  5. If preauth required → must be obtained
- There is **one procedure per claim**.

**Output Format:**
**Coverage Review:**
- [Step-by-step check]

**Summary of Findings:**
- [Met/Not Met] Diagnosis match
- [Met/Not Met] Procedure listed
- [Met/Not Met] Age in range
- [Met/Not Met] Gender match
- [Met/Not Met] Preauth (if required)

**Final Decision:** APPROVE or ROUTE FOR REVIEW
**Reason:** [1 sentence explaining decision]
""")
    chain = prompt | llm | StrOutputParser()
    return chain.invoke({
        "record_summary": record_summary,
        "policy_summary": policy_summary
    })

tools = [summarize_patient_record, summarize_policy_guideline, check_claim_coverage]
tool_node = ToolNode(tools)

# ## 4. System Prompt & ReAct Agent

system_prompt = """
You are an AI insurance claim approval agent. Follow this **exact sequence**:

1. Call `summarize_patient_record` with the full patient record (as JSON string).
2. Extract `insurance_policy_id` from the summary.
3. Call `summarize_policy_guideline` with that policy_id.
4. Call `check_claim_coverage` with both summaries.
5. Output **only**:

Decision: APPROVE or ROUTE FOR REVIEW
Reason: [Concise justification referencing policy rules, age, gender, preauth, diagnosis/procedure match]

**Example:**
Decision: APPROVE
Reason: CPT 85025 for N39.0 is covered for age 43, gender Any, preauth obtained.

Do not add extra text. Use tools in order. Never hallucinate.
"""

from langgraph.prebuilt import create_react_agent

app = create_react_agent(
    llm,
    tools,
    state_modifier=system_prompt
)

# ## 5. Run on Validation Records

def run_agent(record):
    input_msg = {"messages": [("human", json.dumps(record))]}
    result = app.invoke(input_msg)
    final_msg = result["messages"][-1].content
    return final_msg

print("Running validation...")
for rec in validation_records[:2]:  # Test 2
    print(f"\n--- Patient {rec['patient_id']} ---")
    print(run_agent(rec))

# ## 6. Run on Test Records & Save submission.csv

results = []
for rec in test_records:
    response = run_agent(rec)
    results.append({
        "patient_id": rec["patient_id"],
        "generated_response": response.strip()
    })

df = pd.DataFrame(results)
df.to_csv("submission.csv", index=False)
print("\nsubmission.csv generated!")
display(df)
